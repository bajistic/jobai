generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("AWS_DATABASE_URL")
}

model Account {
  id                String   @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model cover_letters {
  id         Int       @id(map: "idx_16435_cover_letters_pkey") @default(autoincrement())
  job_id     Int
  content    String?
  docs_url   String?
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  jobs       jobs      @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_preferences {
  id         Int       @id @default(autoincrement())
  job_id     Int
  user_id    Int       @default(1)
  is_hidden  Boolean?  @default(false)
  is_starred Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  notes      String?
  jobs       jobs      @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([job_id, user_id])
  @@unique([job_id, user_id], map: "unique_job_preference")
}

model jobs {
  id              Int               @id(map: "idx_16426_jobs_pkey") @default(autoincrement())
  title           String?
  location        String?
  company         String?
  workload        String?
  contract        String?
  published       DateTime?         @db.Timestamptz(6)
  url             String?           @unique(map: "idx_16426_sqlite_autoindex_jobs_1")
  description     String?
  ranking         String?
  canton          String?           @default("N/A")
  categories      String?           @default("N/A")
  status          job_status?
  docurl          String?
  note            String?
  starred         String?
  address         String?
  applied_at      DateTime?         @db.Timestamptz(6)
  cover_letters   cover_letters[]
  job_preferences job_preferences[]
}

enum job_status {
  new
  applied
  rejected
  interview
}
