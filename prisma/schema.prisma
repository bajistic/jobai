generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model jobs {
  id           BigInt            @id(map: "idx_16426_jobs_pkey") @default(autoincrement())
  title        String?
  location     String?
  company      String?
  workload     String?
  contract     String?
  published    DateTime?         @db.Timestamptz(6)
  url          String?           @unique(map: "idx_16426_sqlite_autoindex_jobs_1")
  description  String?
  ranking      String?
  canton       String?           @default("N/A")
  categories   String?           @default("N/A")
  status       job_status?
  docurl       String?
  note         String?
  starred      String?
  address      String?
  applied_at   DateTime?         @db.Timestamptz(6)
  cover_letter cover_letters[]
  preferences  job_preferences[]
}

model job_preferences {
  id         Int       @id @default(autoincrement())
  job_id     Int
  user_id    Int       @default(1)
  is_hidden  Boolean?  @default(false)
  is_starred Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  notes      String?
  jobs       jobs      @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([job_id, user_id])
  @@unique([job_id, user_id], map: "unique_job_preference")
}

model cover_letters {
  id            BigInt    @id(map: "idx_16435_cover_letters_pkey") @default(autoincrement())
  job_id        BigInt?
  content       String?
  googleDocsUrl String?
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  job           jobs?     @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum job_status {
  new
  applied
  rejected
  interview
}
